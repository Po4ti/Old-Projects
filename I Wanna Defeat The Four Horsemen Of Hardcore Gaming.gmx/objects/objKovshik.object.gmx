<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprKovshikIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-3</depth>
  <persistent>0</persistent>
  <parentName>objSTGPlayerKiller</parentName>
  <maskName>sprKovshikMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 1/4;

spell = false;
maxHP = 4000; 
curHP = maxHP;
curSpell = 0;

started = false;
phase = 0;
phaseSet = false;
final = false;
inst = noone;


nextX = 0;
nextY = 0;
dir = 0;
dist = 1;
spd = 0;
//set the border region
Uborder = 32;
Dborder = 192;
Lborder = 208;
Rborder = 592;

i=0;
j=0;

magicCircle = instance_create(x,y,objMagicCircle);
enemyIndicator = instance_create(x-16,608,objKovshikIndicator);

vspeed = 8;
friction = scrCalcFriction(128,8);
alarm[0] = scrCalcTime(128,8)+25;

if(!global.visitedDexter) {
    global.visitedDexter = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///move to center
direction = point_direction(x,y,400,272);
speed = 8;
dist = point_distance(x,y,400,272);
friction = scrCalcFriction(dist,8);
alarm[3] = scrCalcTime(dist,8)+5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///full stop
alarm[1] = -1;
alarm[2] = -1;
speed = 0;
friction = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///stop and pick next movement
speed = 0;
friction = 0;

alarm[1] = irandom_range(65,205);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///random movement

nextX = irandom_range(-160,160);
nextY = irandom_range(-80,80);


if(x+nextX &lt; Lborder || x+nextX &gt; Rborder) {
    nextX *= -1;
}

if(y+nextY &lt; Uborder || y+nextY &gt; Dborder) {
    nextY *= -1;
}

dir = point_direction(x,y,x+nextX,y+nextY);
dist = point_distance(x,y,x+nextX,y+nextY);
spd = irandom_range(2,5);

direction = dir;
speed = spd;
friction = scrCalcFriction(dist,spd);

alarm[2] = scrCalcTime(dist,spd)+5;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>started = true;
speed = 0;
friction = 0;
alarm[1] = 100;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scrCreateShadow(0.2,0);

magicCircle.x = x;
magicCircle.y = y;
enemyIndicator.x = x;


if(started) {
    if (bbox_top &lt; Uborder){y = yprevious;}
    if (bbox_left &lt; Lborder){x = xprevious;}
    if (bbox_right &gt;= Rborder){x = xprevious;}
    if (bbox_bottom &gt;= Dborder){y = yprevious;}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(started) {
    if(!phaseSet) {
        phaseSet = true;
        if(phase == 0) {
            inst = instance_create(x,y,objKovshikNonspell1);
        }
        if(phase == 1) {
            inst = instance_create(x,y,objKovshikSpell1);
        }
        if(phase == 2) {
            inst = instance_create(x,y,objKovshikNonspell2);
        }
        if(phase == 3) {
            inst = instance_create(x,y,objKovshikSpell2);
        }
        if(phase == 4) {
            inst = instance_create(x,y,objKovshikNonspell3);
            maxHP = 10000;
            curHP = maxHP;
            alarm[3] = 1;
            alarm[4] = 5;
        }
        if(phase == 5) {
            maxHP = 4000;
            curHP = (maxHP*(1/5));
            inst = instance_create(x,y,objKovshikSpell3);
            alarm[1] = 100;
        }
        if(phase == 6) {
            maxHP = 7500;
            curHP = maxHP;
            inst = instance_create(x,y,objKovshikNonspell4);
        }
        if(phase == 7) {
            inst = instance_create(x,y,objKovshikSpell4);
        }
        
 
        
        
        if(phase == 8) { // FINAL
            inst = instance_create(x,y,objKovshikFinal);
            spell = true;
            maxHP = 3000;
            curHP = maxHP;
            alarm[3] = 1;
            alarm[4] = 5;
            curSpell = 5;
            instance_create(0,0,objSpellCard);
            objDexterController.alpha = 0;
            objDexterController.curSpell = curSpell;
            objDexterController.alarm[1] = 1;
            final = true;
        }
    }
    if(!final) {
        if(!spell) {
            if(curHP &lt;= (maxHP*(1/5))) {
                with(objKovshikNonspell) {
                    instance_destroy();
                }
                spell = true;
                instance_create(0,0,objSpellCard);
                curSpell++;
                phase++;
                phaseSet = false;
                objDexterController.alarm[1] = 1;
                objDexterController.curSpell = curSpell;
            }
        } 
        else {  
            if(curHP &lt;= 0) {
                with(objKovshikSpell) {
                    instance_destroy();
                }
                audio_play_sound(sndTan00,0,0);
                objDexterController.alarm[0] = 1;
                spell = false;
                phase++;
                phaseSet = false;
                curHP = maxHP;
            }
        }
    } 
    else {
    //bye koishi~
        if(curHP &lt;= 0) {
            with(objKovshikSpell) {
                instance_destroy();
            }
            with(magicCircle) {
                instance_destroy();
            }
            magicCircle = noone;
            with(enemyIndicator) {
                instance_destroy();
            }
            enemyIndicator = noone;
            instance_create(x,y,objWhiteFlash);
            audio_play_sound(sndFinalBoom,0,0);
            objDexterController.alarm[2] = 1;
            instance_destroy();
            /*
            instance_create(objPlayerSTG.x,objPlayerSTG.y,objPlayer);
            with(objPlayerSTG) {
                instance_destroy();
            }
            with(objBlackBox) {
                instance_destroy();
            }
            with(objTate) {
                alarm[2] = 1;
            }
            with(objSTGBG) {
                instance_destroy();
            }
            inst = instance_create(704,544,objBossItem);
            inst.itemNum = 2;
            inst.image_index = 2;
            inst = instance_create(160,448,objSpiralWarp);
            inst.roomTo = rStage01;
            with(objDexterController) {
                instance_destroy();
            }
            */
        }   
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///debug
if(global.debugMode) {
    if(keyboard_check_pressed(ord("1"))) {
        spell = false;
        curHP = (maxHP*(1/5)+10);
    }
    if(keyboard_check_pressed(ord("2"))) {
        spell = true;
        curHP = 2;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objBullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(other) {
    instance_destroy();
}
if(curHP &gt; 0) {
    if(!spell) {
        curHP -= 10;
        if(curHP &gt; (maxHP*(1/4))) {
            audio_play_sound(sndSTGDamage,0,0);
        } else {
            audio_play_sound(sndSTGDamageLow,0,0);
        }
    } 
    else {
        curHP -= 2;
        if(curHP &gt; (maxHP*(1/20))) {
            audio_play_sound(sndSTGDamage,0,0);
        } else {
            audio_play_sound(sndSTGDamageLow,0,0);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scrRoundHPBar(100,100,x,y,80,90,64,90,360,1,sprTohoHP,1);
if(curHP &gt; 0) {
    scrRoundHPBar(curHP,maxHP,x,y,80,90,64,90,360,1,sprTohoHP,0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
